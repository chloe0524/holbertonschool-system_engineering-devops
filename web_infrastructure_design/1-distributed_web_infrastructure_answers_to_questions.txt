## Specificity about this infrastructure;

# For every additional element, why you are adding it

By distributing incoming traffic across multiple application servers using a load balancer, you create a system with redundancy and ensure high availability. This means if one server experiences an issue, the load balancer  reroutes traffic to the remaining available and working servers.

# What distribution algorithm your load balancer is configured with and how it works

Resource-based (adaptive) load balancing dynamically distributes tasks to the least busy server, offering an intelligent alternative to the potentially inefficient, Round-Robin approach. 
Round-robin load balancing doesn't account for server capabilities, leading to potentially uneven load distribution and inefficiencies, unlike resource-based methods that prioritize efficient allocation based on real-time server health.

# Is your load-balancer enabling an Active-Active or Active-Passive setup, explain the difference between both

Active-Active: in an Active-Active configuration, both web servers receive traffic and handle requests simultaneously, ensuring high availability. In contrast, an active-passive setup utilizes only one server at a time. If the active server fails, the passive server becomes active and takes over handling requests, maintaining continuity.


# How a database Primary-Replica (Master-Slave) cluster works


Master-slave replication in distributed databases involves a primary/master server for read and write operations, with secondary/slave servers replicating data. This setup alleviates read workload from the primary, aiding performance and resilience. Traditionally physical, it's adaptable to cloud environments. Updates from the master are logged and transmitted to slaves, confirming receipt for subsequent updates, with options for synchronous or asynchronous replication.


# What is the difference between the Primary node and the Replica node in regard to the application

The primary node is responsible for handling both read and write operations, ensuring data consistency and integrity as the authoritative source of truth within the application.
Replica nodes maintain copies of the data from the primary node, providing redundancy to improve fault tolerance and potentially scale read operations, but they typically do not handle write operations directly.


##  Issues with this infrastructure;


# Where are SPOF

The load-balancer becomes a SPOF

# Security issues (no firewall, no HTTPS)
Without a firewall, the infrastructure s at risk of being the victim of an attack.

# No monitoring

Blind spots are inevitable without monitoring, making it difficult to identify and address potential threats before they escalate into major problems.

Sources;

- Is your load-balancer enabling an Active-Active or Active-Passive setup, explain the difference between both

https://blog.purestorage.com/purely-informational/active-active-vs-active-passive-decoding-high-availability-configurations-for-massive-data-networks/#:~:text=Active%2Dactive%20involves%20all%20nodes,standby%20nodes%20ready%20for%20failover.
https://www.youtube.com/watch?v=MDuCFh1XuZU


- How a database Primary-Replica (Master-Slave) cluster works

https://www.enjoyalgorithms.com/blog/master-slave-replication-databases
https://mariadb.com/resources/blog/database-master-slave-replication-in-the-cloud/


-What is the difference between the Primary node and the Replica node in regard to the application

https://www.oreilly.com/library/view/system-design-on/9781098146887/ch01.html
https://www.mongodb.com/basics/clusters/mongodb-cluster-setup
